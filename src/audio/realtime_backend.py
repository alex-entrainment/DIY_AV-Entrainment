"""High-level API for the Rust realtime_backend extension."""

from __future__ import annotations

import json
from importlib import import_module
from typing import Any, Dict

# Import the compiled extension module generated by maturin
_backend = import_module("realtime_backend")


def play_track(track_definition: Dict[str, Any] | str) -> None:
    """Start realtime playback for the given track.

    Parameters
    ----------
    track_definition:
        Either a Python ``dict`` describing the track or a JSON string.
    """
    if isinstance(track_definition, str):
        try:
            json.loads(track_definition)
            track_json = track_definition
        except json.JSONDecodeError as exc:
            raise ValueError("Invalid JSON track definition") from exc
    else:
        track_json = json.dumps(track_definition)
    _backend.start_stream(track_json)


def play_track_file(path: str) -> None:
    """Load a track from ``path`` and begin playback."""
    with open(path, "r", encoding="utf-8") as f:
        track_json = f.read()
    play_track(track_json)


def stop() -> None:
    """Stop the currently playing track."""
    _backend.stop_stream()


def write_sample_wav(track_definition: Dict[str, Any] | str, output_path: str) -> None:
    """Generate a 60s WAV sample for ``track_definition``.

    Parameters
    ----------
    track_definition:
        Track data as ``dict`` or JSON string.
    output_path:
        Destination filename for the sample.
    """
    if isinstance(track_definition, str):
        try:
            json.loads(track_definition)
            track_json = track_definition
        except json.JSONDecodeError as exc:
            raise ValueError("Invalid JSON track definition") from exc
    else:
        track_json = json.dumps(track_definition)
    _backend.render_sample_wav(track_json, output_path)


__all__ = [
    "play_track",
    "play_track_file",
    "stop",
    "write_sample_wav",
]
