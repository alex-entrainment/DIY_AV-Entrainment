#include "sequences.hpp"
#include <Arduino.h>


// AUTOGENERATED FUNCTION - DO NOT EDIT MANUALLY within this block
// Generated from: h_gamma_3.json
// Function name: h_gamma_3
// -------------------------------------------------------------
void h_gamma_3() {
    SequenceStep steps[] = {
// Step 0: 240
    { .durationMs = 240000,
      .startFreqA = 1200, .endFreqA = 400, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 40, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 1, .endFreqB = 4000, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 0, .endBrightnessB = 30, .waveformB = 2
    },
// Step 1: hold
    { .durationMs = 600000,
      .startFreqA = 400, .endFreqA = 400, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 4000, .endFreqB = 4000, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 30, .endBrightnessB = 30, .waveformB = 2
    },
// Step 2: 4->2 40
    { .durationMs = 180000,
      .startFreqA = 400, .endFreqA = 200, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 40, .waveformA = 2,
      .startFreqB = 4000, .endFreqB = 4000, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 30, .endBrightnessB = 30, .waveformB = 2
    },
// Step 3: hold 2
    { .durationMs = 300000,
      .startFreqA = 200, .endFreqA = 200, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 40, .endBrightnessA = 40, .waveformA = 2,
      .startFreqB = 4000, .endFreqB = 4000, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 30, .endBrightnessB = 30, .waveformB = 2
    },
// Step 4: 2 -> 1.2 40
    { .durationMs = 180000,
      .startFreqA = 200, .endFreqA = 120, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 40, .endBrightnessA = 40, .waveformA = 2,
      .startFreqB = 4000, .endFreqB = 4000, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 30, .endBrightnessB = 30, .waveformB = 2
    },
// Step 5: hold 1.2
    { .durationMs = 1200000,
      .startFreqA = 120, .endFreqA = 120, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 40, .endBrightnessA = 40, .waveformA = 2,
      .startFreqB = 4000, .endFreqB = 4000, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 30, .endBrightnessB = 30, .waveformB = 2
    }
    };
    constexpr int stepCount = sizeof(steps) / sizeof(steps[0]);
    Serial.print("Running sequence: h_gamma_3 ("); Serial.print(stepCount); Serial.println(" steps)");

    // Ensure necessary global variables/functions are accessible here
    // extern volatile bool isSequenceRunning;
    // extern bool runSmoothSequence(const SequenceStep* steps, int stepCount);

    isSequenceRunning = true;
    runSmoothSequence(steps, stepCount);
    isSequenceRunning = false;
}
// -------------------------------------------------------------
// END AUTOGENERATED FUNCTION - h_gamma_3
// -------------------------------------------------------------

// AUTOGENERATED FUNCTION - DO NOT EDIT MANUALLY within this block
// Generated from: three_step_frac.json
// Function name: three_step_frac
// -------------------------------------------------------------
void three_step_frac() {
    SequenceStep steps[] = {
// Step 0: 180 10Hz -> 7.83Hz 
    { .durationMs = 180000,
      .startFreqA = 1000, .endFreqA = 783, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 30, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 1000, .endFreqB = 783, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 30, .endBrightnessB = 50, .waveformB = 2
    },
// Step 1: 300 7.83Hz 
    { .durationMs = 300000,
      .startFreqA = 783, .endFreqA = 783, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 783, .endFreqB = 783, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 50, .waveformB = 2
    },
// Step 2: 300 7.83Hz -> 0.01Hz Transition
    { .durationMs = 300000,
      .startFreqA = 783, .endFreqA = 1, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 40, .waveformA = 2,
      .startFreqB = 783, .endFreqB = 1, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 40, .waveformB = 2
    },
// Step 3: 0.1 Transition 0.01Hz -> 5.87Hz 
    { .durationMs = 100,
      .startFreqA = 1, .endFreqA = 587, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 40, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 1, .endFreqB = 587, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 40, .endBrightnessB = 50, .waveformB = 2
    },
// Step 4: 300 5.87Hz 
    { .durationMs = 300000,
      .startFreqA = 587, .endFreqA = 587, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 587, .endFreqB = 587, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 50, .waveformB = 2
    },
// Step 5: 180 5.87Hz -> 0.01Hz Transition 
    { .durationMs = 180000,
      .startFreqA = 587, .endFreqA = 1, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 40, .waveformA = 2,
      .startFreqB = 587, .endFreqB = 1, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 40, .waveformB = 2
    },
// Step 6: 0.1 Transition 0.01Hz -> 3.92Hz 
    { .durationMs = 100,
      .startFreqA = 1, .endFreqA = 392, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 40, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 1, .endFreqB = 392, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 40, .endBrightnessB = 50, .waveformB = 2
    },
// Step 7: 300 3.92Hz
    { .durationMs = 300000,
      .startFreqA = 392, .endFreqA = 392, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 392, .endFreqB = 392, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 50, .waveformB = 2
    },
// Step 8: 180 3.92Hz -> 0.01Hz Transition
    { .durationMs = 180000,
      .startFreqA = 392, .endFreqA = 1, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 40, .waveformA = 2,
      .startFreqB = 392, .endFreqB = 1, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 40, .waveformB = 2
    },
// Step 9: 0.1 Transition 0.01Hz -> 2.94Hz 
    { .durationMs = 100,
      .startFreqA = 1, .endFreqA = 294, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 40, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 1, .endFreqB = 294, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 40, .endBrightnessB = 50, .waveformB = 2
    },
// Step 10: 300 2.94Hz
    { .durationMs = 300000,
      .startFreqA = 294, .endFreqA = 294, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 294, .endFreqB = 294, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 50, .waveformB = 2
    },
// Step 11: 30 2.94 -> 7.83Hz 
    { .durationMs = 30000,
      .startFreqA = 294, .endFreqA = 783, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 55, .waveformA = 2,
      .startFreqB = 294, .endFreqB = 783, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 55, .waveformB = 2
    },
// Step 12: 30 7.83Hz -> 2.94Hz 
    { .durationMs = 30000,
      .startFreqA = 783, .endFreqA = 294, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 55, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 783, .endFreqB = 294, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 55, .endBrightnessB = 50, .waveformB = 2
    },
// Step 13: 300 2.94Hz (2)
    { .durationMs = 300000,
      .startFreqA = 294, .endFreqA = 294, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 50, .waveformA = 2,
      .startFreqB = 294, .endFreqB = 294, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 50, .waveformB = 2
    },
// Step 14: 120 Wakeup
    { .durationMs = 120000,
      .startFreqA = 294, .endFreqA = 1566, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 5, .waveformA = 2,
      .startFreqB = 294, .endFreqB = 1566, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 5, .waveformB = 2
    }
    };
    constexpr int stepCount = sizeof(steps) / sizeof(steps[0]);
    Serial.print("Running sequence: three_step_frac ("); Serial.print(stepCount); Serial.println(" steps)");

    // Ensure necessary global variables/functions are accessible here
    // extern volatile bool isSequenceRunning;
    // extern bool runSmoothSequence(const SequenceStep* steps, int stepCount);

    isSequenceRunning = true;
    runSmoothSequence(steps, stepCount);
    isSequenceRunning = false;
}
// -------------------------------------------------------------
// END AUTOGENERATED FUNCTION - three_step_frac
// -------------------------------------------------------------

// AUTOGENERATED FUNCTION - DO NOT EDIT MANUALLY within this block
// Generated from: 40hzsplit.json
// Function name: _40hzsplit
// -------------------------------------------------------------
void _40hzsplit() {
    SequenceStep steps[] = {
// Step 0: New Step
    { .durationMs = 600000,
      .startFreqA = 4000, .endFreqA = 4000, .startDutyA = 50, .endDutyA = 50, .startBrightnessA = 50, .endBrightnessA = 50, .waveformA = 1,
      .startFreqB = 4000, .endFreqB = 4000, .startDutyB = 50, .endDutyB = 50, .startBrightnessB = 50, .endBrightnessB = 50, .waveformB = 2
    }
    };
    constexpr int stepCount = sizeof(steps) / sizeof(steps[0]);
    Serial.print("Running sequence: _40hzsplit ("); Serial.print(stepCount); Serial.println(" steps)");

    // Requires declaration/definition for: isSequenceRunning, runSmoothSequence
    isSequenceRunning = true;
    runSmoothSequence(steps, stepCount);
    isSequenceRunning = false;
}
// -------------------------------------------------------------
// END AUTOGENERATED FUNCTION - _40hzsplit
// -------------------------------------------------------------
